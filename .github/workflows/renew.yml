name: Freecloud自动续费

on:
  schedule:
    # 每天北京时间早上6点运行（UTC时间22点）
    - cron: '0 22 * * *'
  workflow_dispatch:  # 允许手动触发

jobs:
  renew:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        
      - name: 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: 列出工作目录内容
        run: |
          echo "当前工作目录: $(pwd)"
          echo "列出目录内容:"
          ls -la
      
      - name: 确保必要文件存在
        run: |
          if [ ! -f "requirements.txt" ]; then
            echo "创建requirements.txt文件..."
            echo "requests==2.31.0" > requirements.txt
            echo "cloudscraper==1.2.71" >> requirements.txt
            echo "requirements.txt文件已创建"
          fi
          
          # 检查脚本文件是否存在
          SCRIPT_PATH=$(find . -name "freecloud_renewer.py" -type f | head -n 1)
          if [ -z "$SCRIPT_PATH" ]; then
            echo "错误: 找不到脚本文件 freecloud_renewer.py"
            exit 1
          else
            echo "找到脚本: $SCRIPT_PATH"
            
            # 修复中文引号问题
            echo "检查并修复脚本中的中文引号问题..."
            sed -i 's/log_message(f"未能在服务器 {machine_id_to_find} 附近找到"天后"信息")/log_message(f"未能在服务器 {machine_id_to_find} 附近找到\\"天后\\"信息")/' "$SCRIPT_PATH"
            
            # 检查脚本文件中的语法错误
            python -m py_compile "$SCRIPT_PATH" || {
              echo "脚本中存在语法错误，尝试修复..."
              # 检查并修复特定的语法错误
              sed -i 's/f"🆘 脚本执行过程中发生意外总错误: {e}\\n\\n```/f"🆘 脚本执行过程中发生意外总错误: {e}\\n\\n```\\n/g' "$SCRIPT_PATH"
              sed -i 's/{error_details}\\n```"/{error_details}\\n```"/g' "$SCRIPT_PATH"
              
              # 通用修复：将f-string中的中文引号替换为转义的英文引号
              echo "尝试修复所有f-string中的中文引号..."
              grep -n 'f".*".*"' "$SCRIPT_PATH" || true
              sed -i 's/\(f"[^"]*\)"$$$$\([^"]*\)"\([^"]*"\)/\1\\"$$$$\2\\"\3/g' "$SCRIPT_PATH"
              
              echo "尝试修复完成，再次检查语法..."
              python -m py_compile "$SCRIPT_PATH" || {
                echo "仍然存在语法错误，尝试手动更新脚本中问题行..."
                # 如果编译仍然失败，创建一个临时副本进行更多调试
                cp "$SCRIPT_PATH" "${SCRIPT_PATH}.bak"
                echo "#!/usr/bin/env python3" > "$SCRIPT_PATH"
                echo "print('检测到脚本语法错误，无法自动修复。请查看日志并手动修复问题。')" >> "$SCRIPT_PATH"
                echo "exit(1)" >> "$SCRIPT_PATH"
                echo "严重错误: 无法修复脚本中的语法问题，已创建简化版本以防止完全失败。"
                echo "请手动检查和修复原始脚本: ${SCRIPT_PATH}.bak"
              }
            }
          fi
          
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          cat requirements.txt
          pip install -r requirements.txt
      
      - name: 创建环境检查脚本
        run: |
          echo '#!/usr/bin/env python3' > check_env.py
          echo '# -*- coding: utf-8 -*-' >> check_env.py
          echo '' >> check_env.py
          echo 'import os' >> check_env.py
          echo 'import sys' >> check_env.py
          echo 'import glob' >> check_env.py
          echo 'import platform' >> check_env.py
          echo '' >> check_env.py
          echo 'print("==== 环境检查工具 ====")'  >> check_env.py
          echo 'print(f"Python版本: {sys.version}")' >> check_env.py
          echo 'print(f"系统平台: {platform.platform()}")' >> check_env.py
          echo 'print(f"当前工作目录: {os.getcwd()}")' >> check_env.py
          echo '' >> check_env.py
          echo 'print("\\n==== 环境变量检查 ====")'  >> check_env.py
          echo 'required_vars = ["FC_USERNAME", "FC_PASSWORD", "FC_MACHINE_ID", "TELEGRAM_BOT_TOKEN", "TELEGRAM_CHAT_ID"]' >> check_env.py
          echo '' >> check_env.py
          echo 'for var in required_vars:' >> check_env.py
          echo '    value = os.getenv(var)' >> check_env.py
          echo '    if value:' >> check_env.py
          echo '        masked = value[:2] + "*" * (len(value) - 4) + value[-2:] if len(value) > 4 else "****"' >> check_env.py
          echo '        print(f"{var}: {masked} [已设置]")' >> check_env.py
          echo '    else:' >> check_env.py
          echo '        print(f"{var}: [未设置]")' >> check_env.py
          echo '' >> check_env.py
          echo 'print("\\n==== 目录内容 ====")'  >> check_env.py
          echo 'for item in sorted(os.listdir(".")):' >> check_env.py
          echo '    if os.path.isdir(item):' >> check_env.py
          echo '        print(f"📁 {item}/")' >> check_env.py
          echo '    else:' >> check_env.py
          echo '        print(f"📄 {item} ({os.path.getsize(item)} 字节)")' >> check_env.py
          echo '' >> check_env.py
          echo 'print("\\n==== 查找脚本文件 ====")'  >> check_env.py
          echo 'script_paths = glob.glob("**/*freecloud*py", recursive=True)' >> check_env.py
          echo 'if script_paths:' >> check_env.py
          echo '    print("找到以下脚本文件:")' >> check_env.py
          echo '    for path in script_paths:' >> check_env.py
          echo '        print(f"- {path} ({os.path.getsize(path)} 字节)")' >> check_env.py
          echo 'else:' >> check_env.py
          echo '    print("未找到任何匹配 *freecloud*py 的脚本文件")' >> check_env.py
          echo '' >> check_env.py
          echo 'print("\\n==== 检查完成 ====")'  >> check_env.py
          echo "环境检查脚本已创建"
          cat check_env.py
          
      - name: 环境检查
        env:
          FC_USERNAME: ${{ secrets.FC_USERNAME }}
          FC_PASSWORD: ${{ secrets.FC_PASSWORD }}
          FC_MACHINE_ID: ${{ secrets.FC_MACHINE_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          DEBUG_MODE: 'true'
        run: python check_env.py
          
      - name: 运行续费脚本
        env:
          FC_USERNAME: ${{ secrets.FC_USERNAME }}
          FC_PASSWORD: ${{ secrets.FC_PASSWORD }}
          FC_MACHINE_ID: ${{ secrets.FC_MACHINE_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          DEBUG_MODE: 'true'
        run: |
          # 查找脚本文件
          SCRIPT_PATH=$(find . -name "freecloud_renewer.py" -type f | head -n 1)
          if [ -z "$SCRIPT_PATH" ]; then
            echo "错误: 找不到脚本文件 freecloud_renewer.py"
            exit 1
          else
            echo "找到脚本: $SCRIPT_PATH"
            python "$SCRIPT_PATH"
          fi
        
      - name: 如果失败则重试 (可能是验证码问题)
        if: failure()
        env:
          FC_USERNAME: ${{ secrets.FC_USERNAME }}
          FC_PASSWORD: ${{ secrets.FC_PASSWORD }}
          FC_MACHINE_ID: ${{ secrets.FC_MACHINE_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          DEBUG_MODE: 'true'
        run: |
          echo "首次运行失败，等待30秒后重试..."
          sleep 30
          # 查找脚本文件
          SCRIPT_PATH=$(find . -name "freecloud_renewer.py" -type f | head -n 1)
          if [ -z "$SCRIPT_PATH" ]; then
            echo "错误: 找不到脚本文件 freecloud_renewer.py"
            exit 1
          else
            echo "找到脚本: $SCRIPT_PATH"
            python "$SCRIPT_PATH"
          fi 
