name: Freecloud自动续费

on:
  schedule:
    # 每天北京时间早上6点运行（UTC时间22点）
    - cron: '0 22 * * *'
  workflow_dispatch:  # 允许手动触发

jobs:
  renew:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        
      - name: 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: 列出工作目录内容
        run: |
          echo "当前工作目录: $(pwd)"
          echo "列出目录内容:"
          ls -la
      
      - name: 确保必要文件存在
        run: |
          if [ ! -f "requirements.txt" ]; then
            echo "创建requirements.txt文件..."
            echo "requests==2.31.0" > requirements.txt
            echo "cloudscraper==1.2.71" >> requirements.txt
            echo "requirements.txt文件已创建"
          fi
          
          # 检查脚本文件是否存在
          SCRIPT_PATH=$(find . -name "freecloud_renewer.py" -type f | head -n 1)
          if [ -z "$SCRIPT_PATH" ]; then
            echo "错误: 找不到脚本文件 freecloud_renewer.py"
            exit 1
          else
            echo "找到脚本: $SCRIPT_PATH"
            
            # 修复中文引号问题
            echo "检查并修复脚本中的中文引号问题..."
            sed -i 's/log_message(f"未能在服务器 {machine_id_to_find} 附近找到"天后"信息")/log_message(f"未能在服务器 {machine_id_to_find} 附近找到\\"天后\\"信息")/' "$SCRIPT_PATH"
            
            # 检查脚本文件中的语法错误
            python -m py_compile "$SCRIPT_PATH" || {
              echo "脚本中存在语法错误，尝试修复..."
              # 检查并修复特定的语法错误
              sed -i 's/f"🆘 脚本执行过程中发生意外总错误: {e}\\n\\n```/f"🆘 脚本执行过程中发生意外总错误: {e}\\n\\n```\\n/g' "$SCRIPT_PATH"
              sed -i 's/{error_details}\\n```"/{error_details}\\n```"/g' "$SCRIPT_PATH"
              
              # 通用修复：将f-string中的中文引号替换为转义的英文引号
              echo "尝试修复所有f-string中的中文引号..."
              grep -n 'f".*".*"' "$SCRIPT_PATH" || true
              sed -i 's/\(f"[^"]*\)"$$$$\([^"]*\)"\([^"]*"\)/\1\\"$$$$\2\\"\3/g' "$SCRIPT_PATH"
              
              echo "尝试修复完成，再次检查语法..."
              python -m py_compile "$SCRIPT_PATH" || {
                echo "仍然存在语法错误，尝试手动更新脚本中问题行..."
                # 如果编译仍然失败，创建一个临时副本进行更多调试
                cp "$SCRIPT_PATH" "${SCRIPT_PATH}.bak"
                echo "#!/usr/bin/env python3" > "$SCRIPT_PATH"
                echo "print('检测到脚本语法错误，无法自动修复。请查看日志并手动修复问题。')" >> "$SCRIPT_PATH"
                echo "exit(1)" >> "$SCRIPT_PATH"
                echo "严重错误: 无法修复脚本中的语法问题，已创建简化版本以防止完全失败。"
                echo "请手动检查和修复原始脚本: ${SCRIPT_PATH}.bak"
              }
            }
          fi
          
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          cat requirements.txt
          pip install -r requirements.txt
      
      - name: 创建环境检查脚本
        run: |
          echo '#!/usr/bin/env python3' > check_env.py
          echo '# -*- coding: utf-8 -*-' >> check_env.py
          echo '' >> check_env.py
          echo 'import os' >> check_env.py
          echo 'import sys' >> check_env.py
          echo 'import glob' >> check_env.py
          echo 'import platform' >> check_env.py
          echo '' >> check_env.py
          echo 'print("==== 环境检查工具 ====")'  >> check_env.py
          echo 'print(f"Python版本: {sys.version}")' >> check_env.py
          echo 'print(f"系统平台: {platform.platform()}")' >> check_env.py
          echo 'print(f"当前工作目录: {os.getcwd()}")' >> check_env.py
          echo '' >> check_env.py
          echo 'print("\\n==== 环境变量检查 ====")'  >> check_env.py
          echo 'required_vars = ["FC_USERNAME", "FC_PASSWORD", "FC_MACHINE_ID", "TELEGRAM_BOT_TOKEN", "TELEGRAM_CHAT_ID"]' >> check_env.py
          echo '' >> check_env.py
          echo 'for var in required_vars:' >> check_env.py
          echo '    value = os.getenv(var)' >> check_env.py
          echo '    if value:' >> check_env.py
          echo '        masked = value[:2] + "*" * (len(value) - 4) + value[-2:] if len(value) > 4 else "****"' >> check_env.py
          echo '        print(f"{var}: {masked} [已设置]")' >> check_env.py
          echo '    else:' >> check_env.py
          echo '        print(f"{var}: [未设置]")' >> check_env.py
          echo '' >> check_env.py
          echo 'print("\\n==== 目录内容 ====")'  >> check_env.py
          echo 'for item in sorted(os.listdir(".")):' >> check_env.py
          echo '    if os.path.isdir(item):' >> check_env.py
          echo '        print(f"📁 {item}/")' >> check_env.py
          echo '    else:' >> check_env.py
          echo '        print(f"📄 {item} ({os.path.getsize(item)} 字节)")' >> check_env.py
          echo '' >> check_env.py
          echo 'print("\\n==== 查找脚本文件 ====")'  >> check_env.py
          echo 'script_paths = glob.glob("**/*freecloud*py", recursive=True)' >> check_env.py
          echo 'if script_paths:' >> check_env.py
          echo '    print("找到以下脚本文件:")' >> check_env.py
          echo '    for path in script_paths:' >> check_env.py
          echo '        print(f"- {path} ({os.path.getsize(path)} 字节)")' >> check_env.py
          echo 'else:' >> check_env.py
          echo '    print("未找到任何匹配 *freecloud*py 的脚本文件")' >> check_env.py
          echo '' >> check_env.py
          echo 'print("\\n==== 检查完成 ====")'  >> check_env.py
          echo "环境检查脚本已创建"
          cat check_env.py
          
      - name: 环境检查
        env:
          FC_USERNAME: ${{ secrets.FC_USERNAME }}
          FC_PASSWORD: ${{ secrets.FC_PASSWORD }}
          FC_MACHINE_ID: ${{ secrets.FC_MACHINE_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          DEBUG_MODE: 'true'
        run: python check_env.py
          
      - name: 使用curl直接访问网站续费
        env:
          FC_USERNAME: ${{ secrets.FC_USERNAME }}
          FC_PASSWORD: ${{ secrets.FC_PASSWORD }}
          FC_MACHINE_ID: ${{ secrets.FC_MACHINE_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "尝试使用curl直接访问网站..."
          
          # 创建随机User-Agent
          USER_AGENTS=(
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36"
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36"
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0"
          )
          
          RANDOM_INDEX=$((RANDOM % ${#USER_AGENTS[@]}))
          RANDOM_UA="${USER_AGENTS[$RANDOM_INDEX]}"
          
          # 增加额外的HTTP头以更像真实浏览器
          ACCEPT_HEADER="text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
          ACCEPT_LANGUAGE="zh-CN,zh;q=0.9,en;q=0.8"
          ACCEPT_ENCODING="gzip, deflate, br"
          
          # 创建一个包含所有cookie的临时文件
          COOKIE_JAR="cookies.txt"
          
          # 首先访问首页获取初始cookie和CSRF令牌
          echo "访问首页获取初始cookie和CSRF令牌..."
          HOME_PAGE=$(curl -s -c "$COOKIE_JAR" -b "$COOKIE_JAR" \
            -H "User-Agent: $RANDOM_UA" \
            -H "Accept: $ACCEPT_HEADER" \
            -H "Accept-Language: $ACCEPT_LANGUAGE" \
            -H "Accept-Encoding: $ACCEPT_ENCODING" \
            -H "Connection: keep-alive" \
            -H "Upgrade-Insecure-Requests: 1" \
            -H "Sec-Fetch-Dest: document" \
            -H "Sec-Fetch-Mode: navigate" \
            -H "Sec-Fetch-Site: none" \
            -H "Sec-Fetch-User: ?1" \
            --compressed \
            --max-time 30 "https://freecloud.ltd/")
          
          # 提取CSRF令牌
          CSRF_TOKEN=$(echo "$HOME_PAGE" | grep -o 'name="_token" value="[^"]*"' | sed 's/name="_token" value="//g' | sed 's/"//g' || echo "")
          if [ -n "$CSRF_TOKEN" ]; then
            echo "找到CSRF令牌: ${CSRF_TOKEN:0:10}..."
          else
            echo "未找到CSRF令牌，继续尝试..."
          fi
          
          # 模拟人类行为：随机停顿
          SLEEP_TIME=$(( RANDOM % 3 + 2 ))
          echo "模拟人类行为，随机停顿 ${SLEEP_TIME} 秒..."
          sleep $SLEEP_TIME
          
          # 访问登录页面获取数学验证码
          echo "访问登录页面获取数学验证码..."
          LOGIN_PAGE=$(curl -s -c "$COOKIE_JAR" -b "$COOKIE_JAR" \
            -H "User-Agent: $RANDOM_UA" \
            -H "Accept: $ACCEPT_HEADER" \
            -H "Accept-Language: $ACCEPT_LANGUAGE" \
            -H "Accept-Encoding: $ACCEPT_ENCODING" \
            -H "Connection: keep-alive" \
            -H "Upgrade-Insecure-Requests: 1" \
            -H "Referer: https://freecloud.ltd/" \
            -H "Sec-Fetch-Dest: document" \
            -H "Sec-Fetch-Mode: navigate" \
            -H "Sec-Fetch-Site: same-origin" \
            -H "Sec-Fetch-User: ?1" \
            --compressed \
            --max-time 30 "https://freecloud.ltd/login")
          
          # 保存登录页面内容以便调试
          echo "保存登录页面内容以便调试..."
          echo "$LOGIN_PAGE" | grep -i -A 3 -B 3 "captcha\|验证码\|math" > login_page_debug.txt
          cat login_page_debug.txt
          
          # 使用正则表达式提取数学验证码题目
          MATH_QUESTION=$(echo "$LOGIN_PAGE" | grep -o 'placeholder="[0-9]\+ [+*/\-] [0-9]\+ = ?"' | head -1 || true)
          
          if [ -z "$MATH_QUESTION" ]; then
            echo "未能找到数学验证码题目，尝试其他匹配模式..."
            # 尝试其他匹配模式
            MATH_QUESTION=$(echo "$LOGIN_PAGE" | grep -o 'placeholder="[0-9]+ [+*/\-] [0-9]+ = ?"' || true)
            
            if [ -z "$MATH_QUESTION" ]; then
              echo "仍未找到数学验证码题目，尝试直接登录"
              MATH_ANSWER=""
            else
              echo "使用第二种模式找到验证码问题: $MATH_QUESTION"
            fi
          else
            echo "找到验证码问题: $MATH_QUESTION"
          fi
          
          if [ -n "$MATH_QUESTION" ]; then
            # 提取数字和运算符
            NUM1=$(echo "$MATH_QUESTION" | grep -o -E '[0-9]+' | head -1)
            OP=$(echo "$MATH_QUESTION" | grep -o -E '[+*/\-]')
            NUM2=$(echo "$MATH_QUESTION" | grep -o -E '[0-9]+' | tail -1)
            
            echo "解析验证码: 第一个数字=$NUM1, 运算符=$OP, 第二个数字=$NUM2"
            
            # 计算答案
            if [ "$OP" = "+" ]; then
              MATH_ANSWER=$((NUM1 + NUM2))
            elif [ "$OP" = "-" ]; then
              MATH_ANSWER=$((NUM1 - NUM2))
            elif [ "$OP" = "*" ]; then
              MATH_ANSWER=$((NUM1 * NUM2))
            elif [ "$OP" = "/" ]; then
              MATH_ANSWER=$((NUM1 / NUM2))
            else
              MATH_ANSWER=""
            fi
            
            echo "计算结果: $MATH_ANSWER"
          fi
          
          # 登录请求
          echo "尝试登录..."
          
          # 模拟人类行为：随机停顿
          SLEEP_TIME=$(( RANDOM % 3 + 2 ))
          echo "模拟人类行为，随机停顿 ${SLEEP_TIME} 秒..."
          sleep $SLEEP_TIME
          
          # 准备登录数据
          LOGIN_DATA=""
          if [ -n "$CSRF_TOKEN" ]; then
            LOGIN_DATA="_token=$CSRF_TOKEN&"
          fi
          LOGIN_DATA="${LOGIN_DATA}username=$FC_USERNAME&password=$FC_PASSWORD&math_captcha=$MATH_ANSWER&mobile=&captcha=&verify_code=&agree=1&login_type=PASS&submit=1"
          
          LOGIN_RESULT=$(curl -s -c "$COOKIE_JAR" -b "$COOKIE_JAR" \
            -X POST \
            -H "User-Agent: $RANDOM_UA" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -H "Accept: $ACCEPT_HEADER" \
            -H "Accept-Language: $ACCEPT_LANGUAGE" \
            -H "Accept-Encoding: $ACCEPT_ENCODING" \
            -H "Connection: keep-alive" \
            -H "Referer: https://freecloud.ltd/login" \
            -H "Origin: https://freecloud.ltd" \
            -H "Sec-Fetch-Dest: document" \
            -H "Sec-Fetch-Mode: navigate" \
            -H "Sec-Fetch-Site: same-origin" \
            -H "Sec-Fetch-User: ?1" \
            --data "$LOGIN_DATA" \
            --compressed \
            --max-time 30 \
            "https://freecloud.ltd/login")
          
          # 查看cookie文件
          echo "Cookie文件内容:"
          cat "$COOKIE_JAR" || echo "无法读取Cookie文件"
          
          # 检查登录是否成功 - 使用多种方法检查
          echo "验证登录状态..."
          sleep 3
          
          # 方法1：直接请求服务器页面
          CONSOLE_PAGE=$(curl -s -c "$COOKIE_JAR" -b "$COOKIE_JAR" \
            -H "User-Agent: $RANDOM_UA" \
            -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8" \
            -H "Accept-Language: zh-CN,zh;q=0.9,en;q=0.8" \
            -H "Referer: https://freecloud.ltd/login" \
            --compressed \
            --max-time 30 "https://freecloud.ltd/server/lxc")
          
          # 检查是否存在成功登录的标志
          if echo "$CONSOLE_PAGE" | grep -q "退出登录\|logout\|欢迎回来"; then
            echo "登录成功，检查服务器信息..."
            
            # 查找服务器信息
            MACHINE_ID="$FC_MACHINE_ID"
            SERVER_INFO=$(echo "$CONSOLE_PAGE" | grep -A 50 -B 50 "$MACHINE_ID" | grep -o '[0-9]\+天后')
            
            if [ -n "$SERVER_INFO" ]; then
              DAYS_LEFT=$(echo "$SERVER_INFO" | grep -o '[0-9]\+')
              echo "服务器 $MACHINE_ID 剩余 $DAYS_LEFT 天"
              
              # 判断是否需要续费
              if [ "$DAYS_LEFT" -lt 3 ]; then
                echo "剩余天数少于3天，需要续费"
                
                # 访问服务器详情页
                echo "访问服务器详情页..."
                sleep 2
                curl -s -c "$COOKIE_JAR" -b "$COOKIE_JAR" -A "$RANDOM_UA" --max-time 30 "https://freecloud.ltd/server/detail/$MACHINE_ID" > /dev/null
                
                # 执行续费操作
                echo "执行续费操作..."
                sleep 2
                RENEW_RESULT=$(curl -s -c "$COOKIE_JAR" -b "$COOKIE_JAR" -A "$RANDOM_UA" \
                  -X POST \
                  -H "Content-Type: application/x-www-form-urlencoded" \
                  -H "X-Requested-With: XMLHttpRequest" \
                  -H "Referer: https://freecloud.ltd/server/detail/$MACHINE_ID" \
                  --data-urlencode "month=1" \
                  --data-urlencode "coupon_id=0" \
                  --data-urlencode "submit=1" \
                  --max-time 45 \
                  "https://freecloud.ltd/server/detail/$MACHINE_ID/renew")
                  
                echo "续费结果: $RENEW_RESULT"
                
                # 发送Telegram通知
                if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
                  if echo "$RENEW_RESULT" | grep -q "success\|成功\|code\":0"; then
                    MESSAGE="✅ 服务器 $MACHINE_ID 续费成功！原剩余: $DAYS_LEFT 天。"
                  else
                    MESSAGE="❌ 服务器 $MACHINE_ID 续费失败。原剩余: $DAYS_LEFT 天。"
                  fi
                  
                  curl -s -X POST \
                    -H "Content-Type: application/json" \
                    --data "{\"chat_id\":\"$TELEGRAM_CHAT_ID\",\"text\":\"$MESSAGE\",\"parse_mode\":\"Markdown\"}" \
                    "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage"
                fi
              else
                echo "剩余天数为 $DAYS_LEFT 天，无需续费"
                
                # 发送Telegram通知
                if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
                  MESSAGE="ℹ️ 服务器 $MACHINE_ID 剩余 $DAYS_LEFT 天，无需续费。"
                  
                  curl -s -X POST \
                    -H "Content-Type: application/json" \
                    --data "{\"chat_id\":\"$TELEGRAM_CHAT_ID\",\"text\":\"$MESSAGE\",\"parse_mode\":\"Markdown\"}" \
                    "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage"
                fi
              fi
            else
              echo "未能找到服务器 $MACHINE_ID 的剩余天数信息"
              
              # 发送Telegram通知
              if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
                MESSAGE="⚠️ 未能找到服务器 $MACHINE_ID 的信息，无法续费。"
                
                curl -s -X POST \
                  -H "Content-Type: application/json" \
                  --data "{\"chat_id\":\"$TELEGRAM_CHAT_ID\",\"text\":\"$MESSAGE\",\"parse_mode\":\"Markdown\"}" \
                  "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage"
              fi
            fi
          else
            echo "登录失败，无法获取服务器信息"
            
            # 发送Telegram通知
            if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
              MESSAGE="🔴 使用curl方式登录Freecloud失败，无法续费。"
              
              curl -s -X POST \
                -H "Content-Type: application/json" \
                --data "{\"chat_id\":\"$TELEGRAM_CHAT_ID\",\"text\":\"$MESSAGE\",\"parse_mode\":\"Markdown\"}" \
                "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage"
            fi
          fi
          
          # 清理临时文件
          rm -f "$COOKIE_JAR"
        
      - name: 如果失败重试一次
        if: failure()
        env:
          FC_USERNAME: ${{ secrets.FC_USERNAME }}
          FC_PASSWORD: ${{ secrets.FC_PASSWORD }}
          FC_MACHINE_ID: ${{ secrets.FC_MACHINE_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "首次运行失败，等待30秒后使用浏览器自动化方式重试..."
          sleep 30
          
          # 安装所需工具和依赖
          echo "安装Puppeteer所需的系统依赖..."
          sudo apt-get update
          sudo apt-get install -y ca-certificates fonts-liberation libasound2 libatk-bridge2.0-0 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgbm1 libgcc1 libglib2.0-0 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 lsb-release wget xdg-utils
          
          echo "安装Node.js依赖..."
          npm init -y
          npm install puppeteer puppeteer-extra puppeteer-extra-plugin-stealth
          
          echo "创建浏览器自动化脚本..."
          cat > freecloud_puppeteer.js << 'EOL'
          const puppeteer = require('puppeteer-extra');
          const StealthPlugin = require('puppeteer-extra-plugin-stealth');
          puppeteer.use(StealthPlugin());
          
          // 获取环境变量
          const FC_USERNAME = process.env.FC_USERNAME;
          const FC_PASSWORD = process.env.FC_PASSWORD;
          const FC_MACHINE_ID = process.env.FC_MACHINE_ID;
          const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
          const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
          
          // 随机延迟函数
          const randomDelay = async (min = 1000, max = 3000) => {
            const delay = Math.floor(Math.random() * (max - min)) + min;
            console.log(`随机延迟 ${delay}ms...`);
            await new Promise(r => setTimeout(r, delay));
          };
          
          // 发送Telegram通知
          const sendTelegramMessage = async (message) => {
            if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
              console.log('未配置Telegram通知');
              return;
            }
            
            try {
              console.log(`发送Telegram通知: ${message}`);
              const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  chat_id: TELEGRAM_CHAT_ID,
                  text: message,
                  parse_mode: 'Markdown'
                })
              });
              
              const result = await response.json();
              console.log('Telegram通知发送结果:', result.ok ? '成功' : '失败');
            } catch (error) {
              console.error('发送Telegram通知时出错:', error.message);
            }
          };
          
          // 主函数
          (async () => {
            console.log('启动浏览器...');
            const browser = await puppeteer.launch({
              headless: true,
              args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-accelerated-2d-canvas',
                '--disable-gpu',
                '--window-size=1920,1080',
                '--disable-web-security',
              ]
            });
            
            try {
              const page = await browser.newPage();
              
              // 设置视窗大小
              await page.setViewport({ width: 1920, height: 1080 });
              
              // 设置用户代理
              await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36');
              
              // 绕过WebDriver检测
              await page.evaluateOnNewDocument(() => {
                delete navigator.__proto__.webdriver;
                
                // 添加Chrome浏览器特性
                window.chrome = {
                  runtime: {},
                  loadTimes: function() {},
                  csi: function() {},
                  app: {
                    isInstalled: false,
                  },
                };
                
                // 添加语言和平台特性
                Object.defineProperty(navigator, 'languages', {
                  get: () => ['zh-CN', 'zh', 'en-US', 'en'],
                });
                
                Object.defineProperty(navigator, 'plugins', {
                  get: () => [
                    {
                      0: {type: 'application/x-google-chrome-pdf'},
                      description: 'Portable Document Format',
                      filename: 'internal-pdf-viewer',
                      length: 1,
                      name: 'Chrome PDF Plugin'
                    }
                  ],
                });
              });
              
              console.log('访问登录页面...');
              try {
                await page.goto('https://freecloud.ltd/login', { 
                  waitUntil: 'networkidle2',
                  timeout: 60000 
                });
              } catch (error) {
                console.log('访问登录页面超时或错误:', error.message);
                console.log('尝试继续...');
              }
              
              // 等待页面加载完成，检查是否存在Cloudflare挑战
              console.log('检查是否存在Cloudflare挑战...');
              const isChallengePresent = await page.evaluate(() => {
                return document.body.textContent.includes('Checking your browser') || 
                       document.body.textContent.includes('正在检查您的浏览器') ||
                       document.title.includes('Cloudflare') ||
                       document.querySelector('div[class*="cf-"]') !== null;
              });
              
              if (isChallengePresent) {
                console.log('检测到Cloudflare挑战，等待挑战完成...');
                try {
                  await page.waitForFunction(
                    () => !document.body.textContent.includes('Checking your browser') && 
                          !document.body.textContent.includes('正在检查您的浏览器') && 
                          !document.title.includes('Cloudflare'),
                    { timeout: 30000 }
                  );
                  console.log('Cloudflare挑战已通过');
                } catch (error) {
                  console.log('等待Cloudflare挑战通过超时:', error.message);
                  
                  // 保存页面截图和HTML以便调试
                  await page.screenshot({ path: 'cloudflare_challenge.png' });
                  const pageContent = await page.content();
                  console.log('页面内容片段:', pageContent.substring(0, 500) + '...');
                  
                  console.log('尝试继续执行...');
                }
              }
              
              // 确认我们已经在登录页面
              console.log('确认已进入登录页面...');
              try {
                await page.waitForSelector('input[name="username"]', { timeout: 10000 });
              } catch (error) {
                console.log('未找到登录表单，尝试手动导航到登录页...');
                try {
                  await page.goto('https://freecloud.ltd/login', { waitUntil: 'networkidle2' });
                  await page.waitForSelector('input[name="username"]', { timeout: 10000 });
                } catch (retryError) {
                  console.log('二次尝试后仍未找到登录表单:', retryError.message);
                  
                  // 保存页面截图以便调试
                  await page.screenshot({ path: 'login_page_error.png' });
                  
                  // 发送Telegram通知
                  await sendTelegramMessage('❌ 浏览器自动化失败: 无法访问登录页面或找不到登录表单');
                  return;
                }
              }
              
              // 随机延迟，模拟人类行为
              await randomDelay();
              
              // 查找并处理数学验证码
              console.log('查找数学验证码...');
              const mathCaptchaElement = await page.$('input[name="math_captcha"]');
              let mathAnswer = '';
              
              if (mathCaptchaElement) {
                console.log('找到数学验证码输入框，尝试解析验证码问题...');
                const placeholder = await page.evaluate(el => el.getAttribute('placeholder'), mathCaptchaElement);
                console.log(`验证码问题: ${placeholder}`);
                
                // 解析数学问题
                const match = placeholder.match(/(\d+)\s*([+\-*/])\s*(\d+)\s*=\s*\?/);
                if (match) {
                  const num1 = parseInt(match[1]);
                  const operator = match[2];
                  const num2 = parseInt(match[3]);
                  
                  // 计算答案
                  if (operator === '+') {
                    mathAnswer = num1 + num2;
                  } else if (operator === '-') {
                    mathAnswer = num1 - num2;
                  } else if (operator === '*') {
                    mathAnswer = num1 * num2;
                  } else if (operator === '/') {
                    mathAnswer = Math.floor(num1 / num2);
                  }
                  
                  console.log(`验证码答案: ${mathAnswer}`);
                } else {
                  console.log('无法解析数学验证码问题');
                }
              } else {
                console.log('未找到数学验证码输入框');
              }
              
              // 填写登录表单
              console.log('填写登录表单...');
              await page.type('input[name="username"]', FC_USERNAME);
              await randomDelay(500, 1500);
              await page.type('input[name="password"]', FC_PASSWORD);
              
              // 如果找到了数学验证码答案，填入
              if (mathAnswer) {
                await randomDelay(500, 1500);
                await page.type('input[name="math_captcha"]', mathAnswer.toString());
              }
              
              // 确保同意条款被选中
              await randomDelay(500, 1000);
              const agreeCheckbox = await page.$('input[name="agree"]');
              if (agreeCheckbox) {
                const isChecked = await page.evaluate(el => el.checked, agreeCheckbox);
                if (!isChecked) {
                  await page.click('input[name="agree"]');
                }
              }
              
              // 提交表单
              console.log('提交登录表单...');
              await randomDelay(1000, 2000);
              
              // 点击登录按钮
              try {
                await Promise.all([
                  page.click('button[type="submit"]'),
                  page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 60000 })
                ]);
              } catch (error) {
                console.log('等待导航超时，继续执行:', error.message);
              }
              
              // 保存登录后页面的截图
              await page.screenshot({ path: 'after_login.png' });
              
              // 检查是否登录成功
              console.log('检查登录状态...');
              const isLoggedIn = await page.evaluate(() => {
                return document.body.textContent.includes('退出登录') || 
                       document.body.textContent.includes('logout') || 
                       document.body.textContent.includes('欢迎回来');
              });
              
              if (isLoggedIn) {
                console.log('登录成功！');
                
                // 访问服务器列表页面
                console.log('访问服务器列表页面...');
                try {
                  await page.goto('https://freecloud.ltd/server/lxc', { 
                    waitUntil: 'networkidle2',
                    timeout: 30000 
                  });
                } catch (error) {
                  console.log('访问服务器列表页面超时:', error.message);
                }
                
                // 保存页面内容以便调试
                await page.screenshot({ path: 'server_list_page.png' });
                
                // 查找服务器信息
                console.log(`查找服务器ID: ${FC_MACHINE_ID}...`);
                
                // 获取页面内容
                const pageContent = await page.content();
                
                // 使用正则表达式查找剩余天数
                const regex = new RegExp(`${FC_MACHINE_ID}[\\s\\S]*?([0-9]+)天后`, 'i');
                const match = pageContent.match(regex);
                
                if (match) {
                  const daysLeft = parseInt(match[1]);
                  console.log(`服务器 ${FC_MACHINE_ID} 剩余 ${daysLeft} 天`);
                  
                  // 判断是否需要续费
                  if (daysLeft < 3) {
                    console.log('剩余天数少于3天，需要续费');
                    
                    // 访问服务器详情页
                    console.log('访问服务器详情页...');
                    try {
                      await page.goto(`https://freecloud.ltd/server/detail/${FC_MACHINE_ID}`, { 
                        waitUntil: 'networkidle2',
                        timeout: 30000 
                      });
                    } catch (error) {
                      console.log('访问服务器详情页超时:', error.message);
                    }
                    
                    await randomDelay();
                    
                    // 查找并点击续费按钮
                    console.log('查找续费按钮...');
                    const renewButton = await page.evaluateHandle(() => {
                      // 查找包含"续费"文本的按钮
                      const buttons = Array.from(document.querySelectorAll('button'));
                      const renewButton = buttons.find(btn => 
                        btn.textContent.includes('续费') || 
                        btn.textContent.includes('renew')
                      );
                      
                      return renewButton || null;
                    });
                    
                    if (renewButton) {
                      console.log('找到续费按钮，点击...');
                      await renewButton.click();
                      
                      // 等待续费对话框出现
                      try {
                        await page.waitForFunction(() => {
                          return document.body.textContent.includes('续费时长') || 
                                 document.body.textContent.includes('Renewal Period');
                        }, { timeout: 10000 });
                      } catch (error) {
                        console.log('等待续费对话框超时:', error.message);
                      }
                      
                      await randomDelay();
                      
                      // 选择1个月的续费时长
                      console.log('选择1个月续费时长...');
                      await page.evaluate(() => {
                        // 查找并选择1个月选项
                        const monthInputs = Array.from(document.querySelectorAll('input[name="month"]'));
                        const oneMonthInput = monthInputs.find(input => input.value === '1');
                        if (oneMonthInput && !oneMonthInput.checked) {
                          oneMonthInput.click();
                        }
                      });
                      
                      await randomDelay();
                      
                      // 查找并点击确认按钮
                      console.log('查找确认按钮...');
                      const confirmButton = await page.evaluateHandle(() => {
                        // 查找包含"确认"或"确定"文本的按钮
                        const buttons = Array.from(document.querySelectorAll('button'));
                        const confirmButton = buttons.find(btn => 
                          btn.textContent.includes('确认') || 
                          btn.textContent.includes('确定') ||
                          btn.textContent.includes('Confirm')
                        );
                        
                        return confirmButton || null;
                      });
                      
                      if (confirmButton) {
                        console.log('找到确认按钮，点击...');
                        await confirmButton.click();
                        await page.waitForTimeout(5000);
                        
                        console.log('续费操作已提交');
                        
                        // 检查续费是否成功
                        const renewalSuccess = await page.evaluate(() => {
                          return document.body.textContent.includes('成功') || 
                                 document.body.textContent.includes('success');
                        });
                        
                        if (renewalSuccess) {
                          console.log('续费成功！');
                          await sendTelegramMessage(`✅ 浏览器自动化: 服务器 ${FC_MACHINE_ID} 续费成功！原剩余: ${daysLeft} 天。`);
                        } else {
                          console.log('可能续费失败');
                          await sendTelegramMessage(`⚠️ 浏览器自动化: 服务器 ${FC_MACHINE_ID} 续费操作已提交，但结果不确定。请手动检查。原剩余: ${daysLeft} 天。`);
                        }
                      } else {
                        console.log('未找到确认按钮');
                        await sendTelegramMessage(`❓ 浏览器自动化: 服务器 ${FC_MACHINE_ID} 找不到续费确认按钮。请手动续费。剩余: ${daysLeft} 天。`);
                      }
                    } else {
                      console.log('未找到续费按钮');
                      await sendTelegramMessage(`❓ 浏览器自动化: 服务器 ${FC_MACHINE_ID} 找不到续费按钮。请手动续费。剩余: ${daysLeft} 天。`);
                    }
                  } else {
                    console.log(`剩余天数为 ${daysLeft} 天，无需续费`);
                    await sendTelegramMessage(`ℹ️ 浏览器自动化: 服务器 ${FC_MACHINE_ID} 剩余 ${daysLeft} 天，无需续费。`);
                  }
                } else {
                  console.log(`未能找到服务器 ${FC_MACHINE_ID} 的剩余天数信息`);
                  await sendTelegramMessage(`⚠️ 浏览器自动化: 未能找到服务器 ${FC_MACHINE_ID} 的信息，无法续费。`);
                }
              } else {
                console.log('登录失败');
                
                // 截图保存登录失败页面
                await page.screenshot({ path: 'login_failed.png' });
                
                await sendTelegramMessage(`🔴 浏览器自动化: 登录Freecloud失败，无法续费。`);
              }
            } catch (error) {
              console.error('浏览器自动化过程中发生错误:', error);
              await sendTelegramMessage(`❌ 浏览器自动化: 过程中发生错误: ${error.message}`);
            } finally {
              await browser.close();
              console.log('浏览器已关闭');
            }
          })();
          EOL
          
          echo "运行浏览器自动化脚本..."
          node freecloud_puppeteer.js 
